#!/bin/bash

# S3-Based Initialization and Deployment
# Exit on any error
set -e

JAR_NAME=$1
SPRING_PROFILE=$2

if [ -z "$JAR_NAME" ]; then
    echo "Usage: $0 <jar-name>"
    echo "Example: $0 {{projectName}}-api-1.0.123.1-SNAPSHOT.jar"
    exit 1
fi

echo "=== Starting S3-Based Initialization and Deployment ==="
echo "=== JAR: $JAR_NAME ==="

# Configure AWS CLI region for this script
export AWS_DEFAULT_REGION="{{region}}"
echo "=== AWS Region: $AWS_DEFAULT_REGION ==="

# 1. Set timezone
echo "=== Setting timezone ==="
sudo timedatectl set-timezone US/Central

# 2. Create directories if not exists
echo "=== Creating directory structure ==="
sudo mkdir -p /opt/{{backendModule.name}}/ec2-setup
sudo mkdir -p /opt/{{backendModule.name}}/lib
sudo mkdir -p /opt/{{backendModule.name}}/env
sudo mkdir -p /opt/{{backendModule.name}}/logs
sudo mkdir -p /opt/{{backendModule.name}}/backups

# 3. Install system dependencies
echo "=== Installing system dependencies ==="
sudo yum update -y

# Install Java 21 (Amazon Corretto)
echo "Installing Java 21 (Amazon Corretto)..."
if command -v java &> /dev/null; then
    echo "‚úÖ Java is already installed:"
    java -version
else
    echo "Installing Amazon Corretto 21..."
    # Check OS version and install accordingly
    if grep -q "Amazon Linux 2" /etc/os-release; then
        echo "Detected Amazon Linux 2, installing Corretto 21..."
        # Import Amazon Corretto public key and repository
        sudo rpm --import https://yum.corretto.aws/corretto.key
        sudo curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
        sudo yum install -y java-21-amazon-corretto-devel
    elif grep -q "Amazon Linux" /etc/os-release; then
        echo "Detected Amazon Linux 2023+, installing Corretto 21..."
        sudo yum install -y java-21-amazon-corretto-devel
    else
        echo "Unknown Linux distribution, trying default Java installation..."
        sudo yum install -y java-21-amazon-corretto-devel || sudo yum install -y java-21-openjdk-devel || sudo yum install -y java-17-openjdk-devel
    fi
    
    # Verify installation
    if command -v java &> /dev/null; then
        echo "‚úÖ Java installed successfully:"
        java -version
    else
        echo "‚ùå Java installation failed!"
        exit 1
    fi
fi

# Install PostgreSQL client (try multiple package names for compatibility)
echo "Installing PostgreSQL client..."
sudo yum install -y postgresql postgresql-client || sudo yum install -y postgresql15 || echo "PostgreSQL client installation skipped"

# Install Redis (optional, disable by default)
echo "Installing Redis (disabled by default)..."
sudo amazon-linux-extras install redis6 -y || sudo yum install -y redis || echo "Redis installation skipped"
sudo systemctl disable redis || sudo systemctl disable redis6 || echo "Redis service disable skipped"

# Install other dependencies
sudo yum install -y awscli jq wget curl unzip

echo "=== Verifying installed packages ==="
java -version
aws --version
jq --version
psql --version || echo "PostgreSQL verification failed"
redis-server --version || echo "Redis verification failed"

# 4. Create {{backendModule.name}} user if not exists
echo "=== Creating {{backendModule.name}} user ==="
if ! id "{{backendModule.name}}" &>/dev/null; then
    sudo useradd -r -s /bin/bash -d /opt/{{backendModule.name}} -c "{{backendModule.name}} API Service" {{backendModule.name}}
    echo "User '{{backendModule.name}}' created successfully"
else
    echo "‚úÖ User '{{backendModule.name}}' already exists"
fi



# 5. Sync all EC2 setup files from S3
echo "=== Syncing all EC2 setup scripts from S3 ==="

# Determine environment for S3 bucket (fallback to spring profile or production)
if [ -n "$SPRING_PROFILE" ]; then
    ENV_FOR_S3="$SPRING_PROFILE"
else
    ENV_FOR_S3="production"
fi

echo "Source: s3://{{projectName}}-${ENV_FOR_S3}-ops/ec2-setup/"
echo "Target: /opt/{{backendModule.name}}/ec2-setup/"

# Create target directory if it doesn't exist
sudo mkdir -p /opt/{{backendModule.name}}/ec2-setup

# Sync all files from S3 ec2-setup directory
if sudo aws s3 sync s3://{{projectName}}-${ENV_FOR_S3}-ops/ec2-setup/ /opt/{{backendModule.name}}/ec2-setup/; then
    echo "‚úÖ Successfully synced EC2 setup scripts from S3"
    
    # Make all shell scripts executable
    sudo chmod +x /opt/{{backendModule.name}}/ec2-setup/*.sh
    
    # Set ownership for all files
    sudo chown -R {{backendModule.name}}:{{backendModule.name}} /opt/{{backendModule.name}}/ec2-setup/
    
    echo "üìã Downloaded EC2 setup files:"
    ls -la /opt/{{backendModule.name}}/ec2-setup/
else
    echo "‚ùå Failed to sync EC2 setup scripts from S3"
    echo "‚ö†Ô∏è Continuing with manual setup..."
fi

# 6. Setup systemd service
echo "=== Setting up systemd service ==="
if [ -f "/opt/{{backendModule.name}}/ec2-setup/{{backendModule.name}}-api.service" ]; then
    sudo cp /opt/{{backendModule.name}}/ec2-setup/{{backendModule.name}}-api.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable {{backendModule.name}}-api.service
    echo "‚úÖ Systemd service configured successfully"
else
    echo "‚ùå Service file not found: /opt/{{backendModule.name}}/ec2-setup/{{backendModule.name}}-api.service"
    echo "‚ö†Ô∏è Manual service setup may be required"
fi

# 7. Set ownership
echo "=== Setting ownership ==="
sudo chown -R {{backendModule.name}}:{{backendModule.name}} /opt/{{backendModule.name}}



# 8. Configure Spring profile and secrets
echo "=== Configuring Spring profile and secrets ==="

# Determine environment for secret name (fallback to spring profile or production)
if [ -n "$SPRING_PROFILE" ]; then
    ENV_FOR_SECRET="$SPRING_PROFILE"
    echo "Using Spring profile for environment: $SPRING_PROFILE"
else
    ENV_FOR_SECRET="production"
    echo "No Spring profile specified, defaulting to production"
fi

# Read extension-required Spring profiles from genesis3.json
EXTENSION_PROFILES=""
if [ -f "/opt/{{backendModule.name}}/ec2-setup/genesis3.json" ]; then
    echo "üìã Reading extension profiles from genesis3.json..."
    EXTENSION_PROFILES=$(jq -r '.springProfiles // [] | join(",")' /opt/{{backendModule.name}}/ec2-setup/genesis3.json)
    if [ -n "$EXTENSION_PROFILES" ]; then
        echo "‚úÖ Found extension profiles: $EXTENSION_PROFILES"
    else
        echo "‚ÑπÔ∏è No extension profiles found in genesis3.json"
    fi
else
    echo "‚ö†Ô∏è genesis3.json not found at /opt/{{backendModule.name}}/ec2-setup/genesis3.json"
    echo "‚ÑπÔ∏è Continuing without extension profiles"
fi

# Single secret name for all application and database secrets
APP_SECRET_NAME="{{projectName}}-${ENV_FOR_SECRET}-app-secrets"
echo "Looking for application secrets: $APP_SECRET_NAME"

# Start building the spring.env file
echo "Creating Spring environment configuration..."
TEMP_SPRING_ENV="/tmp/spring.env.$$"

# Build complete Spring profiles list (environment + extensions)
if [ -n "$SPRING_PROFILE" ]; then
    BASE_PROFILE="$SPRING_PROFILE"
else
    BASE_PROFILE="production"
fi

if [ -n "$EXTENSION_PROFILES" ]; then
    # Combine environment profile with extension profiles
    SPRING_PROFILES_ACTIVE="${BASE_PROFILE},${EXTENSION_PROFILES}"
    echo "üìã Spring profiles: ${BASE_PROFILE} (environment) + ${EXTENSION_PROFILES} (extensions)"
else
    # Only environment profile
    SPRING_PROFILES_ACTIVE="$BASE_PROFILE"
    echo "üìã Spring profiles: ${BASE_PROFILE} (environment only)"
fi

echo "SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE" > "$TEMP_SPRING_ENV"
echo "‚úÖ Set SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE"

# Fetch secrets from AWS Secrets Manager
echo "=== Fetching secrets from AWS Secrets Manager ==="
echo "Looking for secrets: $APP_SECRET_NAME"

if aws secretsmanager get-secret-value --secret-id "$APP_SECRET_NAME" --query 'SecretString' --output text >/dev/null 2>&1; then
    echo "‚úÖ Found secrets: $APP_SECRET_NAME"
    
    # Get the secret value and parse JSON
    SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id "$APP_SECRET_NAME" --query 'SecretString' --output text)
    
    if [ $? -eq 0 ] && [ -n "$SECRET_JSON" ]; then
        echo "‚úÖ Successfully retrieved secrets JSON"
        
        # Dump all key-value pairs with SPRING_ENV_ prefix
        echo "üìã Adding secrets to Spring environment:"
        echo "$SECRET_JSON" | jq -r 'to_entries[] | "SPRING_ENV_\(.key)=\(.value)"' >> "$TEMP_SPRING_ENV"
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully parsed and added secrets to environment"
            # Show what we added (mask sensitive values)
            echo "üìã Environment variables added:"
            echo "$SECRET_JSON" | jq -r 'to_entries[] | "SPRING_ENV_\(.key)=***MASKED***"'
        else
            echo "‚ùå Failed to parse secret JSON"
            echo "‚ö†Ô∏è Secret JSON format may be invalid"
        fi
    else
        echo "‚ùå Failed to retrieve secret value"
    fi
else
    echo "‚ö†Ô∏è Secret not found: $APP_SECRET_NAME"
    echo "‚ÑπÔ∏è Continuing without secrets"
fi

# Check if we have the minimum required configuration
if ! grep -q "SPRING_DATASOURCE_URL" "$TEMP_SPRING_ENV"; then
    echo "‚ö†Ô∏è Warning: No database configuration found in secrets"
    echo "‚ö†Ô∏è Application may fail to start without database connection"
fi

# Final summary
echo "üìã Secrets configuration completed"

# Move temp file to final location
sudo mv "$TEMP_SPRING_ENV" /opt/{{backendModule.name}}/env/spring.env
sudo chown {{backendModule.name}}:{{backendModule.name}} /opt/{{backendModule.name}}/env/spring.env
sudo chmod 644 /opt/{{backendModule.name}}/env/spring.env

echo "üìã Final Spring environment configuration:"
echo "SPRING_PROFILES_ACTIVE=$(grep SPRING_PROFILES_ACTIVE /opt/{{backendModule.name}}/env/spring.env | cut -d'=' -f2)"
echo "Additional environment variables: $(grep -v SPRING_PROFILES_ACTIVE /opt/{{backendModule.name}}/env/spring.env | wc -l)"

# 9. Backup existing jar file
echo "=== Backing up existing JAR file ==="
if [ -f "/opt/{{backendModule.name}}/lib/app.jar" ]; then
    BACKUP_NAME="app.jar.backup.$(date +%Y%m%d_%H%M%S)"
    sudo cp /opt/{{backendModule.name}}/lib/app.jar /opt/{{backendModule.name}}/lib/$BACKUP_NAME
    echo "Existing JAR backed up as: $BACKUP_NAME"
else
    echo "No existing JAR found, skipping backup"
fi

# 10. Download new JAR from S3
echo "=== Downloading new JAR file ==="
if sudo aws s3 cp "s3://{{projectName}}-${ENV_FOR_S3}-ops/jars/$JAR_NAME" /opt/{{backendModule.name}}/lib/app.jar; then
    echo "‚úÖ Successfully downloaded $JAR_NAME from S3"
    sudo chown {{backendModule.name}}:{{backendModule.name}} /opt/{{backendModule.name}}/lib/app.jar
    sudo chmod 644 /opt/{{backendModule.name}}/lib/app.jar
else
    echo "‚ùå Failed to download $JAR_NAME from S3"
    exit 1
fi

# 11. Restart service
echo "=== Restarting {{backendModule.name}}-api service with profile: $SPRING_PROFILE ==="
sudo systemctl restart {{backendModule.name}}-api.service

# Verify service is running
echo "=== Verifying service startup ==="
sleep 5

RETRY_COUNT=0
MAX_RETRIES=24
SLEEP_TIME=10

while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if systemctl is-active --quiet {{backendModule.name}}-api.service; then
        echo "‚úÖ Service is running successfully!"
        echo
        echo "=== Service Status ==="
        sudo systemctl status {{backendModule.name}}-api.service --no-pager -l
        echo
        echo "=== Recent Logs ==="
        sudo journalctl -u {{backendModule.name}}-api.service -n 10 --no-pager
        echo
        echo "=== Current JAR ==="
        ls -la /opt/{{backendModule.name}}/lib/app.jar
        echo
        echo "=== Initialization and Deployment completed successfully ==="
        exit 0
    fi
    
    RETRY_COUNT=$((RETRY_COUNT + 1))
    echo "Service not ready yet, waiting... (attempt $RETRY_COUNT/$MAX_RETRIES)"
    sleep $SLEEP_TIME
done

# If we get here, the service failed to start
echo "‚ùå Service failed to start after $((MAX_RETRIES * SLEEP_TIME)) seconds."
echo
echo "=== Service Status ==="
sudo systemctl status {{backendModule.name}}-api.service --no-pager -l
echo
echo "=== Recent Error Logs ==="
sudo journalctl -u {{backendModule.name}}-api.service -n 20 --no-pager
exit 1